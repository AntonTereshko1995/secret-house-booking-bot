from datetime import date, datetime, time, timedelta
import sys
import os
from typing import Sequence
from src.services.logger_service import LoggerService
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from src.services.navigation_service import NavigatonService
from src.services.settings_service import SettingsService
from src.services.file_service import FileService
from src.services.calculation_rate_service import CalculationRateService
from db.models.gift import GiftBase
from matplotlib.dates import relativedelta
from src.constants import END, SET_PASSWORD, ENTER_PRICE, ENTER_PREPAYMENT
from src.services.calendar_service import CalendarService
from db.models.user import UserBase
from db.models.booking import BookingBase
from src.services.database_service import DatabaseService
from src.config.config import (
    ADMIN_CHAT_ID,
    PERIOD_IN_MONTHS,
    INFORM_CHAT_ID,
    BANK_CARD_NUMBER,
    BANK_PHONE_NUMBER,
    ADMINISTRATION_CONTACT,
)
from telegram.error import TelegramError
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from src.helpers import string_helper, tariff_helper

database_service = DatabaseService()
calendar_service = CalendarService()
calculation_rate_service = CalculationRateService()
file_service = FileService()
settings_service = SettingsService()
navigation_service = NavigatonService()


def entry_points():
    """Returns list of entry points for ConversationHandler"""
    return [
        CallbackQueryHandler(
            booking_callback,
            pattern=r"^booking_\d+_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$",
        ),
        CallbackQueryHandler(
            gift_callback, pattern=r"^gift_\d+_chatid_(\d+)_giftid_(\d+)$"
        ),
    ]


def get_purchase_handler() -> ConversationHandler:
    handler = ConversationHandler(
        entry_points=entry_points(),
        states={
            ENTER_PRICE: [
                MessageHandler(filters.Chat(chat_id=ADMIN_CHAT_ID) & filters.TEXT & ~filters.COMMAND, handle_price_input),
                CallbackQueryHandler(cancel_price_input, pattern="^cancel_price_input$"),
                CallbackQueryHandler(
                    booking_callback,
                    pattern=r"^booking_\d+_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$",
                ),
            ],
            ENTER_PREPAYMENT: [
                MessageHandler(filters.Chat(chat_id=ADMIN_CHAT_ID) & filters.TEXT & ~filters.COMMAND, handle_prepayment_input),
                CallbackQueryHandler(cancel_prepayment_input, pattern="^cancel_prepayment_input$"),
                CallbackQueryHandler(
                    booking_callback,
                    pattern=r"^booking_\d+_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$",
                ),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(
                booking_callback,
                pattern=r"^booking_\d+_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$",
            ),
            CallbackQueryHandler(
                gift_callback, pattern=r"^gift_\d+_chatid_(\d+)_giftid_(\d+)$"
            ),
        ],
    )
    return handler


def get_password_handler() -> ConversationHandler:
    handler = ConversationHandler(
        entry_points=[CommandHandler("change_password", change_password)],
        states={
            SET_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password_input),
                CallbackQueryHandler(cancel_password_change, pattern="^cancel_password_change$"),
            ],
        },
        fallbacks=[],
    )
    return handler


async def change_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ask admin to enter new password via text input"""
    chat_id = update.effective_chat.id
    if chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return END

    # Store current password in context
    context.user_data["old_password"] = settings_service.password

    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_password_change")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç –∫–ª—é—á–Ω–∏—Ü—ã</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: <b>{settings_service.password}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1235):"
    )

    await update.message.reply_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    return SET_PASSWORD


async def handle_password_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle password input from admin - called for text input in SET_PASSWORD state"""
    chat_id = update.effective_chat.id

    # Only respond to admin chat
    if chat_id != ADMIN_CHAT_ID:
        return END

    password_text = update.message.text.strip()

    # Validate input - must be exactly 4 digits
    if not password_text.isdigit():
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return SET_PASSWORD

    if len(password_text) != 4:
        await update.message.reply_text(
            "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return SET_PASSWORD

    # Update password
    old_password = context.user_data.get("old_password", settings_service.password)
    settings_service.password = password_text

    await update.message.reply_text(
        f"‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω!\n\n"
        f"–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: {old_password}\n"
        f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {password_text}"
    )

    # Clear context
    context.user_data.pop("old_password", None)

    return END


async def cancel_password_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel password change"""
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # Clear context
    context.user_data.pop("old_password", None)

    return END


async def get_booking_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    else:
        bookings = get_future_bookings()

        if not bookings:
            await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return END

        for booking in bookings:
            user = database_service.get_user_by_id(booking.user_id)
            message = "‚õî –û—Ç–º–µ–Ω–µ–Ω\n" if booking.is_canceled else ""
            message += (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.contact}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {booking.start_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {booking.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff_helper.get_name(booking.tariff)}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} —Ä—É–±.\n"
                f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {booking.prepayment_price} —Ä—É–±.\n"
            )
            await update.message.reply_text(text=message)
    return END


async def get_unpaid_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command to show all unpaid bookings"""
    chat_id = update.effective_chat.id
    if chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return END

    bookings = database_service.get_unpaid_bookings()

    if not bookings:
        await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return END

    for booking in bookings:
        await accept_booking_payment(
            update,
            context,
            booking,
            booking.chat_id,
            None,
            None,
            False
        )

    return END


def _create_booking_keyboard(user_chat_id: int, booking_id: int, is_payment_by_cash: bool) -> InlineKeyboardMarkup:
    """Create inline keyboard for booking management"""
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"booking_1_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"booking_2_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"booking_3_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", callback_data=f"booking_4_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
    ]
    return InlineKeyboardMarkup(keyboard)


def _clear_edit_context(context: ContextTypes.DEFAULT_TYPE, prefix: str):
    """Clear editing context from user_data"""
    keys = [f"{prefix}_booking_id", f"{prefix}_user_chat_id", f"{prefix}_is_payment_by_cash", f"{prefix}_message_id"]
    for key in keys:
        context.user_data.pop(key, None)


async def _edit_message(update: Update, message: str, reply_markup: InlineKeyboardMarkup, parse_mode: str = None):
    """Edit message text or caption depending on message type"""
    if update.callback_query.message.caption:
        await update.callback_query.edit_message_caption(
            caption=message, reply_markup=reply_markup, parse_mode=parse_mode
        )
    else:
        await update.callback_query.edit_message_text(
            text=message, reply_markup=reply_markup, parse_mode=parse_mode
        )


async def accept_booking_payment(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    booking: BookingBase,
    user_chat_id: int,
    photo,
    document,
    is_payment_by_cash=False,
):
    user = database_service.get_user_by_id(booking.user_id)
    count_booking = database_service.get_done_booking_count(booking.user_id)
    message = string_helper.generate_booking_info_message(
        booking, user, is_payment_by_cash, count_of_booking=count_booking
    )
    reply_markup = _create_booking_keyboard(user_chat_id, booking.id, is_payment_by_cash)

    if photo:
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=photo,
            caption=message,
            reply_markup=reply_markup,
        )
    elif document:
        await context.bot.send_document(
            chat_id=ADMIN_CHAT_ID,
            document=document,
            caption=message,
            reply_markup=reply_markup,
        )
    else:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, text=message, reply_markup=reply_markup
        )


async def edit_accept_booking_payment(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    booking_id: int,
    user_chat_id: int,
    is_payment_by_cash,
):
    booking = database_service.get_booking_by_id(booking_id)
    user = database_service.get_user_by_id(booking.user_id)
    count_booking = database_service.get_done_booking_count(booking.user_id)
    message = string_helper.generate_booking_info_message(
        booking, user, is_payment_by_cash, count_of_booking=count_booking
    )
    reply_markup = _create_booking_keyboard(user_chat_id, booking_id, is_payment_by_cash)
    await _edit_message(update, message, reply_markup)


async def accept_gift_payment(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    gift: GiftBase,
    user_chat_id: int,
    photo,
    document,
):
    message = string_helper.generate_gift_info_message(gift)
    keyboard = [
        [
            InlineKeyboardButton(
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"gift_1_chatid_{user_chat_id}_giftid_{gift.id}",
            )
        ],
        [
            InlineKeyboardButton(
                "–û—Ç–º–µ–Ω–∞", callback_data=f"gift_2_chatid_{user_chat_id}_giftid_{gift.id}"
            )
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if photo:
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=photo,
            caption=message,
            reply_markup=reply_markup,
        )
    elif document:
        await context.bot.send_document(
            chat_id=ADMIN_CHAT_ID,
            document=document,
            caption=message,
            reply_markup=reply_markup,
        )


async def inform_cancel_booking(
    update: Update, context: ContextTypes.DEFAULT_TYPE, booking: BookingBase
):
    user = database_service.get_user_by_id(booking.user_id)
    message = (
        f"–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {user.contact}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {booking.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {booking.end_date.strftime('%d.%m.%Y %H:%M')}\n"
    )
    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)


async def inform_changing_booking_date(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    booking: BookingBase,
    old_start_date: date,
):
    user = database_service.get_user_by_id(booking.user_id)
    message = (
        f"–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {user.contact}\n"
        f"–î–∞—Ç–∞: {old_start_date.strftime('%d.%m.%Y')}\n"
    )
    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)

    message = (
        f"–ü–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        f"–°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {old_start_date.strftime('%d.%m.%Y')}\n\n"
        f"{string_helper.generate_booking_info_message(booking, user)}"
    )
    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)


async def booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = string_helper.parse_booking_callback_data(query.data)
    chat_id = data["user_chat_id"]
    booking_id = data["booking_id"]
    menu_index = data["menu_index"]
    is_payment_by_cash = data["is_payment_by_cash"]

    match menu_index:
        case "1":
            return await approve_booking(update, context, chat_id, booking_id)
        case "2":
            return await cancel_booking(update, context, chat_id, booking_id)
        case "3":
            return await request_price_input(update, context, chat_id, booking_id, is_payment_by_cash)
        case "4":
            return await request_prepayment_input(update, context, chat_id, booking_id, is_payment_by_cash)


async def gift_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = string_helper.parse_gift_callback_data(query.data)
    chat_id = data["user_chat_id"]
    gift_id = data["gift_id"]
    menu_index = data["menu_index"]

    match menu_index:
        case "1":
            await approve_gift(update, context, chat_id, gift_id)
        case "2":
            await cancel_gift(update, context, chat_id, gift_id)


async def request_price_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_chat_id: int,
    booking_id: int,
    is_payment_by_cash: bool = False
):
    """Ask admin to enter new price via text input"""
    # Store context in user_data - including is_payment_by_cash and message_id
    context.user_data["price_edit_booking_id"] = booking_id
    context.user_data["price_edit_user_chat_id"] = user_chat_id
    context.user_data["price_edit_is_payment_by_cash"] = is_payment_by_cash
    context.user_data["price_edit_message_id"] = update.callback_query.message.message_id

    booking = database_service.get_booking_by_id(booking_id)
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_price_input")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{booking.price} —Ä—É–±.</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 370):"
    )

    await _edit_message(update, message, reply_markup, parse_mode="HTML")
    return ENTER_PRICE


async def _update_booking_message(
    context: ContextTypes.DEFAULT_TYPE,
    booking_id: int,
    user_chat_id: int,
    is_payment_by_cash: bool,
    message_id: int
):
    """Helper function to update booking message with new data"""
    booking = database_service.get_booking_by_id(booking_id)
    user = database_service.get_user_by_id(booking.user_id)
    count_booking = database_service.get_done_booking_count(booking.user_id)

    message_text = string_helper.generate_booking_info_message(
        booking, user, is_payment_by_cash, count_of_booking=count_booking
    )
    reply_markup = _create_booking_keyboard(user_chat_id, booking_id, is_payment_by_cash)

    # Try to edit message text first, fall back to caption if needed
    try:
        await context.bot.edit_message_text(
            chat_id=ADMIN_CHAT_ID,
            message_id=message_id,
            text=message_text,
            reply_markup=reply_markup
        )
    except Exception:
        try:
            await context.bot.edit_message_caption(
                chat_id=ADMIN_CHAT_ID,
                message_id=message_id,
                caption=message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            LoggerService.error(__name__, f"Failed to update booking message: {e}")


async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle price input from admin"""
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return END

    booking_id = context.user_data.get("price_edit_booking_id")
    if not booking_id:
        return END

    price_text = update.message.text.strip()

    # Validate input
    try:
        new_price = float(price_text)
        if new_price <= 0:
            await update.message.reply_text("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return ENTER_PRICE
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 370):")
        return ENTER_PRICE

    # Update booking
    database_service.update_booking(booking_id, price=new_price)
    await update.message.reply_text(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} —Ä—É–±.")

    # Update original message
    await _update_booking_message(
        context,
        booking_id,
        context.user_data.get("price_edit_user_chat_id"),
        context.user_data.get("price_edit_is_payment_by_cash"),
        context.user_data.get("price_edit_message_id")
    )

    # Clear context
    _clear_edit_context(context, "price_edit")
    return END


async def cancel_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel price input and return to booking menu"""
    await update.callback_query.answer()

    booking_id = context.user_data.get("price_edit_booking_id")
    user_chat_id = context.user_data.get("price_edit_user_chat_id")
    is_payment_by_cash = context.user_data.get("price_edit_is_payment_by_cash")

    if booking_id:
        booking = database_service.get_booking_by_id(booking_id)
        await accept_booking_payment(
            update, context, booking, user_chat_id, None, None, is_payment_by_cash
        )

    # Clear context
    _clear_edit_context(context, "price_edit")
    return END


async def request_prepayment_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_chat_id: int,
    booking_id: int,
    is_payment_by_cash: bool = False
):
    """Ask admin to enter new prepayment via text input"""
    # Store context in user_data - including is_payment_by_cash and message_id
    context.user_data["prepay_edit_booking_id"] = booking_id
    context.user_data["prepay_edit_user_chat_id"] = user_chat_id
    context.user_data["prepay_edit_is_payment_by_cash"] = is_payment_by_cash
    context.user_data["prepay_edit_message_id"] = update.callback_query.message.message_id

    booking = database_service.get_booking_by_id(booking_id)
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_prepayment_input")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: <b>{booking.prepayment_price} —Ä—É–±.</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150):"
    )

    await _edit_message(update, message, reply_markup, parse_mode="HTML")
    return ENTER_PREPAYMENT


async def handle_prepayment_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle prepayment input from admin"""
    if update.effective_chat.id != ADMIN_CHAT_ID:
        return END

    booking_id = context.user_data.get("prepay_edit_booking_id")
    if not booking_id:
        return END

    prepayment_text = update.message.text.strip()

    # Validate input
    try:
        new_prepayment = float(prepayment_text)
        if new_prepayment < 0:
            await update.message.reply_text("‚ùå –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            return ENTER_PREPAYMENT
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150):")
        return ENTER_PREPAYMENT

    # Update booking
    database_service.update_booking(booking_id, prepayment=new_prepayment)
    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_prepayment} —Ä—É–±.")

    # Update original message
    await _update_booking_message(
        context,
        booking_id,
        context.user_data.get("prepay_edit_user_chat_id"),
        context.user_data.get("prepay_edit_is_payment_by_cash"),
        context.user_data.get("prepay_edit_message_id")
    )

    # Clear context
    _clear_edit_context(context, "prepay_edit")
    return END


async def cancel_prepayment_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel prepayment input and return to booking menu"""
    await update.callback_query.answer()

    booking_id = context.user_data.get("prepay_edit_booking_id")
    user_chat_id = context.user_data.get("prepay_edit_user_chat_id")
    is_payment_by_cash = context.user_data.get("prepay_edit_is_payment_by_cash")

    if booking_id:
        booking = database_service.get_booking_by_id(booking_id)
        await accept_booking_payment(
            update, context, booking, user_chat_id, None, None, is_payment_by_cash
        )

    # Clear context
    _clear_edit_context(context, "prepay_edit")
    return END


async def approve_booking(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    booking_id: int
):
    (booking, user) = await prepare_approve_process(update, context, booking_id)
    await check_and_send_booking(context, booking)
    # Prepare confirmation message
    confirmation_text = (
        "üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üéâ\n"
        "‚úÖ <b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
        "üì© –ó–∞ 1 –¥–µ–Ω—å –¥–æ –∑–∞–µ–∑–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é.\n"
        f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.price} —Ä—É–±.\n"
        f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {booking.prepayment_price} —Ä—É–±.\n"
    )
    
    # Add transfer time information if transfer is requested
    if booking.transfer_address:
        # Transfer time is 30 minutes before check-in time
        transfer_time = booking.start_date - timedelta(minutes=30)
        confirmation_text += f"üöó <b>–¢—Ä–∞–Ω—Å—Ñ–µ—Ä:</b> {booking.transfer_address}\n"
        confirmation_text += f"üïê <b>–í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞:</b> {transfer_time.strftime('%d.%m.%Y %H:%M')}\n"
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=confirmation_text,
        parse_mode="HTML",
    )

    text = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ\n\n{string_helper.generate_booking_info_message(booking, user)}"
    message = update.callback_query.message
    if message.caption:
        await message.edit_caption(text)
    else:
        await message.edit_text(text)

    return END


async def cancel_booking(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, booking_id: int
):
    booking = database_service.update_booking(booking_id, is_canceled=True)
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> ‚ö†Ô∏è\n"
        "‚ùå <b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>\n"
        "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        parse_mode="HTML",
    )
    user = database_service.get_user_by_id(booking.user_id)

    text = f"–û—Ç–º–µ–Ω–∞.\n\n {string_helper.generate_booking_info_message(booking, user)}"
    message = update.callback_query.message
    if message.caption:
        await message.edit_caption(text)
    else:
        await message.edit_text(text)
    return END


async def approve_gift(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, gift_id: int
):
    gift = database_service.update_gift(gift_id, is_paymented=True)
    await context.bot.send_message(chat_id=chat_id, text=f"{gift.code}")

    await context.bot.send_message(
        chat_id=chat_id,
        text="üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üéâ\n"
        "‚úÖ <b>–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
        "üì© <b>–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.</b>\n"
        "üîë <b>–ú—ã —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.</b>",
        parse_mode="HTML",
    )
    await update.callback_query.edit_message_caption(
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ \n\n{string_helper.generate_gift_info_message(gift)}"
    )
    return END


async def cancel_gift(
    update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, gift_id: int
):
    gift = database_service.get_gift_by_id(gift_id)
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> ‚ö†Ô∏è\n"
        "‚ùå <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n"
        "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n",
        parse_mode="HTML",
    )
    await update.callback_query.edit_message_caption(
        f"–û—Ç–º–µ–Ω–∞.\n\n {string_helper.generate_gift_info_message(gift)}"
    )
    return END


def get_future_bookings() -> Sequence[BookingBase]:
    today = date.today()
    max_date_booking = today + relativedelta(months=PERIOD_IN_MONTHS)
    booking_list = database_service.get_booking_by_period(today, max_date_booking, True)
    return booking_list


async def prepare_approve_process(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    booking_id: int,
    sale_percentage: int = None,
):
    booking = database_service.get_booking_by_id(booking_id)
    user = database_service.get_user_by_id(booking.user_id)
    calendar_event_id = calendar_service.add_event(booking, user)
    if sale_percentage:
        price = calculation_rate_service.calculate_discounted_price(
            booking.price, sale_percentage
        )
    else:
        price = booking.price
    booking = database_service.update_booking(
        booking_id,
        price=price,
        is_prepaymented=True,
        calendar_event_id=calendar_event_id,
    )
    await inform_message(update, context, booking, user)
    return (booking, user)


def check_gift(booking: BookingBase, user: UserBase):
    if not booking.gift_id:
        return

    gift = database_service.update_gift(booking.gift_id, is_done=True, user_id=user.id)
    return gift


async def inform_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    booking: BookingBase,
    user: UserBase,
):
    message = string_helper.generate_booking_info_message(booking, user)
    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)


async def send_booking_details(
    context: ContextTypes.DEFAULT_TYPE, booking: BookingBase
):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        await context.bot.send_message(
            chat_id=booking.chat_id,
            text="–ú—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏ –ø—É—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ª—É—á—à–µ –≤—Å–µ–≥–æ –¥–æ–µ—Ö–∞—Ç—å –¥–æ The Secret House.\n"
            "–ß–µ—Ä–µ–∑ 500 –º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ –∂/–¥ –ø–µ—Ä–µ–µ–∑–¥–∞ –ø–æ –ª–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –±—É–¥–µ—Ç –æ—Ä–∞–Ω–∂–µ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω. –ü–æ—Å–ª–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ. –≠—Ç–æ –í–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä –Ω—É–∂–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞, –¥–∞–ª–µ–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –í–∞—Å –ø—Ä–∏–≤–µ–∑–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –µ—Ö–∞—Ç—å –≤–¥–æ–ª—å –ª–µ—Å–∞, —Ç–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —Å–∞–¥–æ–≤–æ–µ —Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ '–Æ–±–∏–ª–µ–π–Ω–æ–µ-68' (–±—É–¥–µ—Ç –≤—ã–≤–µ—Å–∫–∞).\n"
            "—Å—Ç. –Æ–±–∏–ª–µ–π–Ω–æ–µ-68, —É–ª. –°–æ—Å–Ω–æ–≤–∞—è, –¥. 2\n\n"
            "–ú–∞—Ä—à—Ä—É—Ç –≤ Yandex map:\n"
            "https://yandex.com.ge/maps/157/minsk/?l=stv%2Csta&ll=27.297381%2C53.932145&mode=routes&rtext=53.939763%2C27.333107~53.938194%2C27.324665~53.932431%2C27.315410~53.930789%2C27.299320~53.934190%2C27.300387&rtt=auto&ruri=~~~~ymapsbm1%3A%2F%2Fgeo%3Fdata%3DCgo0Mzk0MjMwMTgwErMB0JHQtdC70LDRgNGD0YHRjCwg0JzRltC90YHQutGWINGA0LDRkdC9LCDQltC00LDQvdC-0LLRltGG0LrRliDRgdC10LvRjNGB0LDQstC10YIsINGB0LDQtNCw0LLQvtC00YfQsNC1INGC0LDQstCw0YDRi9GB0YLQstCwINCu0LHRltC70LXQudC90LDQtS02OCwg0KHQsNGB0L3QvtCy0LDRjyDQstGD0LvRltGG0LAsIDIiCg0sZ9pBFZ28V0I%2C&z=16.06 \n\n"
            "–ú–∞—Ä—à—Ä—É—Ç Google map:\n"
            "https://maps.app.goo.gl/Hsf9Xw69N8tqHyqt5",
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await context.bot.send_message(
            chat_id=booking.chat_id,
            text="–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –∫–∞–∫–∞—è-—Ç–æ –ø–æ–º–æ—â—å –∏–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –¥–æ–º–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"{ADMINISTRATION_CONTACT}",
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        photo = file_service.get_image("key.jpg")
        await context.bot.send_photo(
            chat_id=booking.chat_id,
            caption="–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∑–∞—Å–µ–ª–µ–Ω–∏–µ.\n"
            f"1. –°–ª–µ–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∫–ª—é—á–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–µ–π –¥–æ–º–∞. –í –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∞—Ç –∫–ª—é—á–∏ –æ—Ç –≤–æ—Ä–æ—Ç –∏ –¥–æ–º–∞. –ü–∞—Ä–æ–ª—å: {settings_service.password}\n"
            "2. –°–ø—Ä–∞–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —è—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–æ–º–∞. –í —è—â–∏–∫ –Ω—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∏ –æ–ø–ª–∞—Ç—É –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–∏—á–∫–æ–π.\n\n"
            "–ü–æ–ø—Ä–æ—à—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–µ 30 –º–∏–Ω. –í–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ The Secret House. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–µ—Ä–µ—Ç –¥–æ–≥–æ–≤–æ—Ä –∏ –¥–µ–Ω—å–≥–∏."
            "–î–æ–≥–æ–≤–æ—Ä –∏ —Ä—É—á–∫–∞ –±—É–¥—É—Ç –ª–µ–∂–∞—Ç—å –≤ –¥–æ–º–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –Ω–∞ –∫—É—Ö–Ω–µ. –í–ª–æ–∂–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä —Å —Ä–æ–∑–æ–≤—ã–π –∫–æ–Ω–≤–µ—Ä—Ç.\n\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫):\n"
            f"–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ {BANK_PHONE_NUMBER}\n"
            "–∏–ª–∏\n"
            f"–ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã {BANK_CARD_NUMBER}",
            photo=photo,
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Å–∞—É–Ω–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if booking.has_sauna:
            await context.bot.send_message(
                chat_id=booking.chat_id,
                text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–∫–ª—é—á–µ–Ω–∏—é —Å–∞—É–Ω—ã:\n"
                "1. –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –≤—Ö–æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏.\n"
                "2. –ü–æ –ø—Ä–∞–≤—É—é —Ä—É–∫—É –Ω–∞—Ö–æ–¥–∏–ª—Å—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç—á–∏–∫.\n"
                "3. –í—Å–µ —Ä—É–±–∏–ª—å–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ä—É–±–∏–ª—å–Ω–∏–∫ —Å –Ω–∞–¥–ø–∏—Å–µ–π ¬´–°–∞—É–Ω–∞¬ª.\n"
                "4. –ß–µ—Ä–µ–∑ 1 —á–∞—Å —Å–∞—É–Ω–∞ –Ω–∞–≥—Ä–µ–µ—Ç—Å—è.\n"
                "5. –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–∏—Ç–µ —Ä—É–±–∏–ª—å–Ω–∏–∫.\n",
            )

        LoggerService.info(
            __name__,
            "All booking details sent successfully",
            kwargs={
                "chat_id": booking.chat_id,
                "booking_id": booking.id,
                "action": "send_booking_details_complete",
            },
        )

    except TelegramError as e:
        LoggerService.error(
            __name__,
            "Failed to send booking details to user",
            exception=e,
            kwargs={
                "chat_id": booking.chat_id,
                "booking_id": booking.id,
                "action": "send_booking_details",
            },
        )
        raise


async def send_feedback(context: ContextTypes.DEFAULT_TYPE, booking: BookingBase):
    """Modified to trigger feedback conversation instead of sending Google Forms link"""
    try:
        # Create inline button to start feedback conversation
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"START_FEEDBACK_{booking.id}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = await context.bot.send_message(
            chat_id=booking.chat_id,
            text="üè° <b>The Secret House –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –¥–æ–º–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã!</b> üí´\n\n"
            "–ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞—à–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. "
            "–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤.\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞ –º—ã –¥–∞—Ä–∏–º –í–∞–º <b>10% —Å–∫–∏–¥–∫–∏</b> –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–µ–∑–¥–∫–∏.",
            parse_mode="HTML",
            reply_markup=reply_markup,
        )

        LoggerService.info(
            __name__,
            "Feedback request sent successfully",
            kwargs={
                "chat_id": booking.chat_id,
                "booking_id": booking.id,
                "message_id": message.message_id,
                "action": "send_feedback",
            },
        )

    except Exception as e:
        LoggerService.error(
            __name__,
            "Failed to send feedback request to user",
            exception=e,
            kwargs={
                "chat_id": booking.chat_id,
                "booking_id": booking.id,
                "action": "send_feedback",
            },
        )
        raise


async def check_and_send_booking(context, booking):
    now = datetime.now()
    job_run_time = time(8, 0)

    condition_1 = booking.start_date.date() == now.date() and now.time() > job_run_time
    condition_2 = (
        booking.start_date.date() == now.date()
        or booking.start_date.date() - timedelta(days=1) == now.date()
    ) and booking.start_date.time() < job_run_time

    if condition_1 or condition_2:
        await send_booking_details(context, booking)
