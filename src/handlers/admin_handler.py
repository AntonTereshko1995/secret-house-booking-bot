from datetime import date, datetime, time, timedelta
import sys
import os
from typing import Sequence
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from src.services.navigation_service import NavigatonService
from src.services.settings_service import SettingsService
from src.services.file_service import FileService
from src.services.calculation_rate_service import CalculationRateService
from db.models.subscription import SubscriptionBase
from db.models.gift import GiftBase
from matplotlib.dates import relativedelta
from src.constants import CONFIRM, EDIT_BOOKING_PURCHASE, END, BACK, SET_PASSWORD
from src.services.calendar_service import CalendarService
from db.models.user import UserBase
from db.models.booking import BookingBase
from src.services.database_service import DatabaseService
from src.config.config import ADMIN_CHAT_ID, PERIOD_IN_MONTHS, INFORM_CHAT_ID, PREPAYMENT, BANK_CARD_NUMBER, BANK_PHONE_NUMBER, ADMINISTRATION_CONTACT
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update)
from telegram.ext import (ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters)
from src.helpers import string_helper, string_helper, tariff_helper

database_service = DatabaseService()
calendar_service = CalendarService()
calculation_rate_service = CalculationRateService()
file_service = FileService()
settings_service = SettingsService()
navigation_service = NavigatonService()
writing_password = ''
new_price: str = ''
new_prepayment_price: str = ''

def get_purchase_handler() -> ConversationHandler:
    handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(booking_callback, pattern=r"^booking_\d+_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$"),
            CallbackQueryHandler(gift_callback, pattern=r"^gift_\d+_chatid_(\d+)_giftid_(\d+)$"),
            CallbackQueryHandler(subscription_callback, pattern=r"^subscription_\d+_chatid_(\d+)_subscriptionid_(\d+)$"),
        ],
        states={ 
            EDIT_BOOKING_PURCHASE: [
                CallbackQueryHandler(change_price, pattern=f"^price_(\d|{CONFIRM}|{BACK})_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$"),
                CallbackQueryHandler(change_prepayment_price, pattern=f"^prepayment_(\d|{CONFIRM}|{BACK})_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$")],
        },
        fallbacks=[
            CallbackQueryHandler(booking_callback, pattern=r"^booking_\d+_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$"),
            CallbackQueryHandler(gift_callback, pattern=r"^gift_\d+_chatid_(\d+)_giftid_(\d+)$"),
            CallbackQueryHandler(subscription_callback, pattern=r"^subscription_\d+_chatid_(\d+)_subscriptionid_(\d+)$")
        ])
    return handler

def get_password_handler() -> ConversationHandler:
    handler = ConversationHandler(
        entry_points=[CommandHandler('change_password', change_password)],
        states={ 
            SET_PASSWORD: [CallbackQueryHandler(enter_house_password, pattern=r"^password_\d$")],
            },
        fallbacks=[])
    return handler

async def change_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return END
    
    keyboard = [
        [InlineKeyboardButton('1', callback_data="password_1"), InlineKeyboardButton('2', callback_data="password_2"), InlineKeyboardButton('3', callback_data="password_3")],
        [InlineKeyboardButton('4', callback_data="password_4"), InlineKeyboardButton('5', callback_data="password_5"), InlineKeyboardButton('6', callback_data="password_6")],
        [InlineKeyboardButton('7', callback_data="password_7"), InlineKeyboardButton('8', callback_data="password_8"), InlineKeyboardButton('9', callback_data="password_9")],
        [InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å', callback_data="password_clear"), InlineKeyboardButton('0', callback_data="password_0"), InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f"password_{str(END)}")]]

    message = (f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ 4 —Ü–∏—Ñ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä 1235.\n" 
            f"–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: {settings_service.password}.\n" 
            f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: {writing_password}")
    if update.message:
        await update.message.reply_text(
            text=message, 
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await navigation_service.safe_edit_message_text(
            callback_query=update.callback_query,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard))
    return SET_PASSWORD

async def enter_house_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global writing_password
    await update.callback_query.answer()
    data = string_helper.get_callback_data(update.callback_query.data)
    if data == str(END):
        writing_password = ''
        return END
    elif data == "clear":
        writing_password = ''
        await change_password(update, context)
        return SET_PASSWORD
    
    writing_password += data
    if len(writing_password) == 4:
        settings_service.password = writing_password
        await update.callback_query.edit_message_text(text=f"–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {writing_password}.")
        writing_password = ''
        return END
    else:
        await change_password(update, context)
        return SET_PASSWORD

async def get_booking_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    else:
        bookings = get_future_bookings()
        lol = list(filter(lambda i: i.price > 400, bookings))

        if not bookings:
            await update.message.reply_text("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
            return END

        for booking in bookings:
            user = database_service.get_user_by_id(booking.user_id)
            message = f"‚õî –û—Ç–º–µ–Ω–µ–Ω\n" if booking.is_canceled else ""
            message += (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.contact}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {booking.start_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {booking.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff_helper.get_name(booking.tariff)}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} —Ä—É–±.\n"
                f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {booking.prepayment_price} —Ä—É–±.\n") 
            await update.message.reply_text(
                text=message)
    return END

async def accept_booking_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, booking: BookingBase, user_chat_id: int, photo, document, is_payment_by_cash = False):
    user = database_service.get_user_by_id(booking.user_id)
    count_booking = database_service.get_done_booking_count(booking.user_id)
    message = string_helper.generate_booking_info_message(booking, user, is_payment_by_cash, count_of_booking=count_booking)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"booking_1_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"booking_2_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"booking_3_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", callback_data=f"booking_4_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–°–∫–∏–¥–∫–∞ 5%", callback_data=f"booking_5_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–°–∫–∏–¥–∫–∞ 10%", callback_data=f"booking_6_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–°–∫–∏–¥–∫–∞ 15%", callback_data=f"booking_7_chatid_{user_chat_id}_bookingid_{booking.id}_cash_{is_payment_by_cash}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if photo:
        await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo, caption=message, reply_markup=reply_markup)
    elif document:
        await context.bot.send_document(chat_id=ADMIN_CHAT_ID, document=document, caption=message, reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message, reply_markup=reply_markup)

async def edit_accept_booking_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: int, user_chat_id: int, is_payment_by_cash):
    booking = database_service.get_booking_by_id(booking_id)
    user = database_service.get_user_by_id(booking.user_id)
    count_booking = database_service.get_done_booking_count(booking.user_id)
    message = string_helper.generate_booking_info_message(booking, user, is_payment_by_cash, count_of_booking=count_booking)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"booking_1_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=f"booking_2_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"booking_3_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", callback_data=f"booking_4_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–°–∫–∏–¥–∫–∞ 5%", callback_data=f"booking_5_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–°–∫–∏–¥–∫–∞ 10%", callback_data=f"booking_6_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton("–°–∫–∏–¥–∫–∞ 15%", callback_data=f"booking_7_chatid_{user_chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_caption(caption=message, reply_markup=reply_markup)

async def accept_gift_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, gift: GiftBase, user_chat_id: int, photo, document):
    message = string_helper.generate_gift_info_message(gift)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"gift_1_chatid_{user_chat_id}_giftid_{gift.id}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"gift_2_chatid_{user_chat_id}_giftid_{gift.id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if photo:
        await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo, caption=message, reply_markup=reply_markup)
    elif document:
        await context.bot.send_document(chat_id=ADMIN_CHAT_ID, document=document, caption=message, reply_markup=reply_markup)

async def accept_subscription_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, subscription: SubscriptionBase, user_chat_id: int, photo, document):
    user = database_service.get_user_by_id(subscription.user_id)
    message = string_helper.generate_subscription_info_message(subscription, user)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"subscription_1_chatid_{user_chat_id}_subscriptionid_{subscription.id}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"subscription_2_chatid_{user_chat_id}_subscriptionid_{subscription.id}")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if photo:
        await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=photo, caption=message, reply_markup=reply_markup)
    elif document:
        await context.bot.send_document(chat_id=ADMIN_CHAT_ID, document=document, caption=message, reply_markup=reply_markup)

async def inform_cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, booking: BookingBase):
    user = database_service.get_user_by_id(booking.user_id)
    message = (
        f"–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {user.contact}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {booking.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {booking.end_date.strftime('%d.%m.%Y %H:%M')}\n")
    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)

async def inform_changing_booking_date(update: Update, context: ContextTypes.DEFAULT_TYPE, booking: BookingBase, old_start_date: date):
    await inform_cancel_booking(update, context, booking)

    user = database_service.get_user_by_id(booking.user_id)
    message = (
        f"–ü–µ—Ä–µ–Ω–æ—Å –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        f"–°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {old_start_date.strftime('%d.%m.%Y')}\n\n"
        f"{string_helper.generate_booking_info_message(booking, user)}")
    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)

async def booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = string_helper.parse_booking_callback_data(query.data)
    chat_id = data["user_chat_id"] 
    booking_id = data["booking_id"]
    menu_index = data["menu_index"]
    is_payment_by_cash = data["is_payment_by_cash"]

    match menu_index:
        case "1":
            return await approve_booking(update, context, chat_id, booking_id, is_payment_by_cash)
        case "2":
            return await cancel_booking(update, context, chat_id, booking_id)
        case "3":
            return await change_price_message(update, context, chat_id, booking_id, is_payment_by_cash)
        case "4":
            return await change_prepayment_price_message(update, context, chat_id, booking_id, is_payment_by_cash)
        case "5":
            return await set_sale_booking(update, context, chat_id, booking_id, 5, is_payment_by_cash)
        case "6":
            return await set_sale_booking(update, context, chat_id, booking_id, 10, is_payment_by_cash)
        case "7":
            return await set_sale_booking(update, context, chat_id, booking_id, 15, is_payment_by_cash)

async def gift_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = string_helper.parse_gift_callback_data(query.data)
    chat_id = data["user_chat_id"] 
    gift_id = data["gift_id"]
    menu_index = data["menu_index"]

    match menu_index:
        case "1":
            await approve_gift(update, context, chat_id, gift_id)
        case "2":
            await cancel_gift(update, context, chat_id, gift_id)

async def subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = string_helper.parse_subscription_callback_data(query.data)
    chat_id = data["user_chat_id"] 
    subscription_id = data["subscription_id"]
    menu_index = data["menu_index"]

    match menu_index:
        case "1":
            await approve_subscription(update, context, chat_id, subscription_id)
        case "2":
            await cancel_subscription(update, context, chat_id, subscription_id)
    
async def approve_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, booking_id: int, is_payment_by_cash: bool):
    (booking, user) = await prepare_approve_process(update, context, booking_id, is_payment_by_cash=is_payment_by_cash)
    await check_and_send_booking(context, booking)
    await context.bot.send_message(
        chat_id=chat_id, 
        text="üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üéâ\n"
            "‚úÖ <b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
            "üì© –ó–∞ 1 –¥–µ–Ω—å –¥–æ –∑–∞–µ–∑–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é.\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.price} —Ä—É–±.\n"
            f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {booking.prepayment_price} —Ä—É–±.\n",
        parse_mode='HTML')
    
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ\n\n{string_helper.generate_booking_info_message(booking, user)}"
    message = update.callback_query.message
    if message.caption:
        await message.edit_caption(text)
    else:
        await message.edit_text(text)
        
    return END

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, booking_id: int):
    booking = database_service.update_booking(booking_id, is_canceled=True)
    await context.bot.send_message(
        chat_id=chat_id, 
        text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> ‚ö†Ô∏è\n"
            "‚ùå <b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>\n"
            "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        parse_mode='HTML')
    user = database_service.get_user_by_id(booking.user_id)

    text = f"–û—Ç–º–µ–Ω–∞.\n\n {string_helper.generate_booking_info_message(booking, user)}"
    message = update.callback_query.message
    if message.caption:
        await message.edit_caption(text)
    else:
        await message.edit_text(text)
    return END

async def approve_gift(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, gift_id: int):
    gift = database_service.update_gift(gift_id, is_paymented=True)
    await context.bot.send_message(
        chat_id=chat_id, 
        text=f"{gift.code}")

    await context.bot.send_message(
        chat_id=chat_id, 
        text="üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üéâ\n"
            "‚úÖ <b>–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
            "üì© <b>–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.</b>\n"
            "üîë <b>–ú—ã —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.</b>",
        parse_mode='HTML')
    await update.callback_query.edit_message_caption(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ \n\n{string_helper.generate_gift_info_message(gift)}")
    return END

async def cancel_gift(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, gift_id: int):
    gift = database_service.get_gift_by_id(gift_id)
    await context.bot.send_message(
        chat_id=chat_id, 
        text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> ‚ö†Ô∏è\n"
            "‚ùå <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n"
            "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n",
        parse_mode='HTML')
    await update.callback_query.edit_message_caption(f"–û—Ç–º–µ–Ω–∞.\n\n {string_helper.generate_gift_info_message(gift)}")
    return END

async def approve_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, subscription_id: int):
    subscription = database_service.update_subscription(subscription_id, is_paymented=True)
    user = database_service.get_user_by_id(subscription.user_id)
    await context.bot.send_message(
        chat_id=chat_id, 
        text=f"{subscription.code}")

    await context.bot.send_message(
        chat_id=chat_id, 
        text="üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üéâ\n"
            "‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
            "üì© –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.\n",
        parse_mode='HTML')
    await update.callback_query.edit_message_caption(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ \n\n{string_helper.generate_subscription_info_message(subscription, user)}")
    return END

async def cancel_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, subscription_id: int):
    subscription = database_service.get_subscription_by_id(subscription_id)
    user = database_service.get_user_by_id(subscription.user_id)
    await context.bot.send_message(
        chat_id=chat_id, 
        text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> ‚ö†Ô∏è\n"
            "‚ùå <b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n"
            "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n",
        parse_mode='HTML')
    await update.callback_query.edit_message_caption(f"–û—Ç–º–µ–Ω–∞.\n\n {string_helper.generate_subscription_info_message(subscription, user)}")
    return END

async def set_sale_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, booking_id: int, sale_percentage: int, is_payment_by_cash: bool):
    (booking, user) = await prepare_approve_process(update, context, booking_id, sale_percentage, is_payment_by_cash=is_payment_by_cash)
    if booking.start_date.date() == date.today():
        await send_booking_details(context, booking)
        
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=END)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat_id, 
        text="üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üéâ\n"
            "‚úÖ <b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
            f"üí∞ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {booking.price}\n"
            "üì© –ó–∞ 1 –¥–µ–Ω—å –¥–æ –∑–∞–µ–∑–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é.",
        parse_mode='HTML',  
        reply_markup=reply_markup)
    await update.callback_query.edit_message_caption(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ \n\n –°–∫–∏–¥–∫–∞: {sale_percentage}% \n\n{string_helper.generate_booking_info_message(booking, user)}")
    return END

def get_future_bookings() -> Sequence[BookingBase]:
    today = date.today()
    max_date_booking = today + relativedelta(months=PERIOD_IN_MONTHS)
    booking_list = database_service.get_booking_by_period(today, max_date_booking, True)
    return booking_list

async def prepare_approve_process(update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: int, sale_percentage: int = None, is_payment_by_cash: bool = None):
    booking = database_service.get_booking_by_id(booking_id)
    user = database_service.get_user_by_id(booking.user_id)
    calendar_event_id = calendar_service.add_event(booking, user)
    if sale_percentage:
        price = calculation_rate_service.calculate_discounted_price(booking.price, sale_percentage)
    else:
        price = booking.price
    booking = database_service.update_booking(booking_id, price=price, is_prepaymented=True, calendar_event_id=calendar_event_id)
    subscription = check_subscription(booking)
    gift = check_gift(booking, user)
    await inform_message(update, context, booking, user, gift, subscription)
    return (booking, user)

def check_subscription(booking: BookingBase):
    if not booking.subscription_id:
        return
    
    subscription = database_service.get_subscription_by_id(booking.subscription_id)
    subscription.number_of_visits += 1
    is_done = True if subscription.number_of_visits == subscription.subscription_type.value else False
    subscription = database_service.update_subscription(subscription.id, is_done=is_done, number_of_visits=subscription.number_of_visits)

def check_gift(booking: BookingBase, user: UserBase):
    if not booking.gift_id:
        return
    
    gift = database_service.update_gift(booking.gift_id, is_done=True, user_id=user.id)
    return gift

async def inform_message(update: Update, context: ContextTypes.DEFAULT_TYPE, booking: BookingBase, user: UserBase, gift: GiftBase, subscription: SubscriptionBase, is_payment_by_cash: bool = None):
    message = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.contact}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {booking.start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {booking.end_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–¢–∞—Ä–∏—Ñ: {tariff_helper.get_name(booking.tariff)}\n")
    
    if gift:
        message += (
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price + gift.price} —Ä—É–±.\n"
            f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {gift.price} —Ä—É–±.\n"
            f"–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–∫–æ–π: {string_helper.bool_to_str(is_payment_by_cash)}\n"
            f"–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: –î–∞\n")
    elif subscription:
        message += (
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} —Ä—É–±.\n"
            f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {subscription.price} —Ä—É–±.\n"
            f"–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–∫–æ–π: {string_helper.bool_to_str(is_payment_by_cash)}\n"
            f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç –∫–æ–ª. –≤–∏–∑–∏—Ç–æ–≤: {subscription.number_of_visits}/{subscription.subscription_type.value}\n")
    else:
        message += (
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} —Ä—É–±.\n"
            f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {booking.prepayment_price} —Ä—É–±.\n")

    message += (
        f"–§–æ—Ç–æ—Å–µ—Å—Å–∏—è: {string_helper.bool_to_str(booking.has_photoshoot)}\n"
        f"–°–∞—É–Ω–∞: {string_helper.bool_to_str(booking.has_sauna)}\n"
        f"–ë–µ–ª–∞—è —Å–ø–∞–ª—å–Ω—è: {string_helper.bool_to_str(booking.has_white_bedroom)}\n"
        f"–ó–µ–ª–µ–Ω–∞—è —Å–ø–∞–ª—å–Ω—è: {string_helper.bool_to_str(booking.has_green_bedroom)}\n"
        f"–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞: {string_helper.bool_to_str(booking.has_secret_room)}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.number_of_guests}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking.comment if booking.comment else ''}\n")

    await context.bot.send_message(chat_id=INFORM_CHAT_ID, text=message)

async def send_booking_details(context: ContextTypes.DEFAULT_TYPE, booking: BookingBase):
    await context.bot.send_message(
        chat_id=booking.chat_id, 
        text="–ú—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏ –ø—É—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ª—É—á—à–µ –≤—Å–µ–≥–æ –¥–æ–µ—Ö–∞—Ç—å –¥–æ The Secret House.\n"
            "–ß–µ—Ä–µ–∑ 500 –º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ –∂/–¥ –ø–µ—Ä–µ–µ–∑–¥–∞ –ø–æ –ª–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –±—É–¥–µ—Ç –æ—Ä–∞–Ω–∂–µ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω. –ü–æ—Å–ª–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ. –≠—Ç–æ –í–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä –Ω—É–∂–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞, –¥–∞–ª–µ–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –í–∞—Å –ø—Ä–∏–≤–µ–∑–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –µ—Ö–∞—Ç—å –≤–¥–æ–ª—å –ª–µ—Å–∞, —Ç–æ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —Å–∞–¥–æ–≤–æ–µ —Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ '–Æ–±–∏–ª–µ–π–Ω–æ–µ-68' (–±—É–¥–µ—Ç –≤—ã–≤–µ—Å–∫–∞).\n" 
            "—Å—Ç. –Æ–±–∏–ª–µ–π–Ω–æ–µ-68, —É–ª. –°–æ—Å–Ω–æ–≤–∞—è, –¥. 2\n\n"
            "–ú–∞—Ä—à—Ä—É—Ç –≤ Yandex map:\n"
            "https://yandex.com.ge/maps/157/minsk/?l=stv%2Csta&ll=27.297381%2C53.932145&mode=routes&rtext=53.939763%2C27.333107~53.938194%2C27.324665~53.932431%2C27.315410~53.930789%2C27.299320~53.934190%2C27.300387&rtt=auto&ruri=~~~~ymapsbm1%3A%2F%2Fgeo%3Fdata%3DCgo0Mzk0MjMwMTgwErMB0JHQtdC70LDRgNGD0YHRjCwg0JzRltC90YHQutGWINGA0LDRkdC9LCDQltC00LDQvdC-0LLRltGG0LrRliDRgdC10LvRjNGB0LDQstC10YIsINGB0LDQtNCw0LLQvtC00YfQsNC1INGC0LDQstCw0YDRi9GB0YLQstCwINCu0LHRltC70LXQudC90LDQtS02OCwg0KHQsNGB0L3QvtCy0LDRjyDQstGD0LvRltGG0LAsIDIiCg0sZ9pBFZ28V0I%2C&z=16.06 \n\n"
            "–ú–∞—Ä—à—Ä—É—Ç Google map:\n"
            "https://maps.app.goo.gl/Hsf9Xw69N8tqHyqt5")
    await context.bot.send_message(
        chat_id=booking.chat_id, 
        text="–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –∫–∞–∫–∞—è-—Ç–æ –ø–æ–º–æ—â—å –∏–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –¥–æ–º–∞, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"{ADMINISTRATION_CONTACT}")
    photo = file_service.get_image("key.jpg")
    await context.bot.send_photo(
        chat_id=booking.chat_id, 
        caption="–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∑–∞—Å–µ–ª–µ–Ω–∏–µ.\n"
            f"1. –°–ª–µ–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∫–ª—é—á–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–µ–π –¥–æ–º–∞. –í –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∞—Ç –∫–ª—é—á–∏ –æ—Ç –≤–æ—Ä–æ—Ç –∏ –¥–æ–º–∞. –ü–∞—Ä–æ–ª—å: {settings_service.password}\n"
            "2. –°–ø—Ä–∞–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —è—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–æ–º–∞. –í —è—â–∏–∫ –Ω—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∏ –æ–ø–ª–∞—Ç—É –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–∏—á–∫–æ–π.\n\n"
            "–ü–æ–ø—Ä–æ—à—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–µ 30 –º–∏–Ω. –í–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ The Secret House. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–µ—Ä–µ—Ç –¥–æ–≥–æ–≤–æ—Ä –∏ –¥–µ–Ω—å–≥–∏."
            "–î–æ–≥–æ–≤–æ—Ä –∏ —Ä—É—á–∫–∞ –±—É–¥—É—Ç –ª–µ–∂–∞—Ç—å –≤ –¥–æ–º–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –Ω–∞ –∫—É—Ö–Ω–µ. –í–ª–æ–∂–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä —Å —Ä–æ–∑–æ–≤—ã–π –∫–æ–Ω–≤–µ—Ä—Ç.\n\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫):\n"
            f"–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {BANK_PHONE_NUMBER}\n"
            "–∏–ª–∏\n"
            f"–ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã {BANK_CARD_NUMBER}",
        photo=photo)
    
    if booking.has_sauna:
        await context.bot.send_message(
            chat_id=booking.chat_id, 
            text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–∫–ª—é—á–µ–Ω–∏—é —Å–∞—É–Ω—ã:\n"
                "1. –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –≤—Ö–æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏.\n"
                "2. –ü–æ –ø—Ä–∞–≤—É—é —Ä—É–∫—É –Ω–∞—Ö–æ–¥–∏–ª—Å—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç—á–∏–∫.\n"
                "3. –í—Å–µ —Ä—É–±–∏–ª—å–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ä—É–±–∏–ª—å–Ω–∏–∫ —Å –Ω–∞–¥–ø–∏—Å–µ–π ¬´–°–∞—É–Ω–∞¬ª.\n"
                "4. –ß–µ—Ä–µ–∑ 1 —á–∞—Å —Å–∞—É–Ω–∞ –Ω–∞–≥—Ä–µ–µ—Ç—Å—è."
                "5. –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–∏—Ç–µ —Ä—É–±–∏–ª—å–Ω–∏–∫.\n")

async def send_feedback(context: ContextTypes.DEFAULT_TYPE, booking: BookingBase):
    await context.bot.send_message(
        chat_id=booking.chat_id, 
        text="üè° The Secret House –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –¥–æ–º–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã! üí´ \n"
            "–ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞—à–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –∞–Ω–æ–Ω–æ–º–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n"
            "–°—Å—ã–ª–∫–∞:\n"
            "https://docs.google.com/forms/d/1FIDlSsLZLWfKOnhAZ8pPKiPEzLcwl5COI7rEIVGgFEM/edit?ts=66719dd9 \n\n"
            "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞ –º—ã –¥–∞—Ä–∏–º –í–∞–º 10% —Å–∫–∏–¥–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–µ–∑–¥–∫–∏.")
    
async def check_and_send_booking(context, booking):
    now = datetime.now()
    job_run_time = time(8, 0)

    condition_1 = booking.start_date.date() == now.date() and now.time() > job_run_time
    condition_2 = (booking.start_date.date() == now.date() or booking.start_date.date() - timedelta(days=1) == now.date())  and booking.start_date.time() < job_run_time

    if condition_1 or condition_2:
        await send_booking_details(context, booking)

async def change_prepayment_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    chat_id = update.effective_chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return END
    
    data = string_helper.parse_change_price_callback_data(update.callback_query.data, f"^prepayment_(\d|{CONFIRM}|{BACK})_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$")
    prepayment_data = data["price"]
    chat_id = data["user_chat_id"] 
    booking_id = data["booking_id"]
    is_payment_by_cash = data["is_payment_by_cash"]

    global new_prepayment_price
    if prepayment_data == BACK:
        new_prepayment_price = ''
        await edit_accept_booking_payment(update, context, booking_id, chat_id, is_payment_by_cash)
        return
    elif prepayment_data == CONFIRM:
        database_service.update_booking(booking_id, prepayment=float(new_prepayment_price))
        await edit_accept_booking_payment(update, context, booking_id, chat_id, is_payment_by_cash)
        new_prepayment_price = ''
        return
    
    if prepayment_data.isdigit():
        new_prepayment_price += prepayment_data
    
    return await change_prepayment_price_message(update, context, chat_id, booking_id, is_payment_by_cash)

async def change_prepayment_price_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int = None, booking_id: int = None, is_payment_by_cash: bool = None):
    keyboard = [
        [InlineKeyboardButton('1', callback_data=f"prepayment_1_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('2', callback_data=f"prepayment_2_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('3', callback_data=f"prepayment_3_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton('4', callback_data=f"prepayment_4_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('5', callback_data=f"prepayment_5_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('6', callback_data=f"prepayment_6_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton('7', callback_data=f"prepayment_7_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('8', callback_data=f"prepayment_8_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('9', callback_data=f"prepayment_9_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f"prepayment_{CONFIRM}_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('0', callback_data=f"prepayment_0_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f"prepayment_{BACK}_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")]]

    message = (f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É–π —Ü–µ–Ω—É –¥–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä 370.\n"
                f"–í—ã –≤–≤–µ–ª–∏: {new_prepayment_price}\n")
    if update.message:
        await update.message.reply_text(
            text=message, 
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_caption(
            caption=message, 
            reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_BOOKING_PURCHASE

async def change_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    chat_id = update.effective_chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return END

    data = string_helper.parse_change_price_callback_data(update.callback_query.data, f"^price_(\d|{CONFIRM}|{BACK})_chatid_(\d+)_bookingid_(\d+)_cash_(True|False)$")
    price_data = data["price"]
    chat_id = data["user_chat_id"] 
    booking_id = data["booking_id"]
    is_payment_by_cash = data["is_payment_by_cash"]

    global new_price
    if price_data == BACK:
        new_price = ''
        await edit_accept_booking_payment(update, context, booking_id, chat_id, is_payment_by_cash)
        return
    elif price_data == CONFIRM:
        database_service.update_booking(booking_id, price=float(new_price))
        await edit_accept_booking_payment(update, context, booking_id, chat_id, is_payment_by_cash)
        new_price = ''
        return
    
    if price_data.isdigit():
        new_price += price_data

    return await change_price_message(update, context, chat_id, booking_id, is_payment_by_cash)
    
async def change_price_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int = None, booking_id: int = None, is_payment_by_cash: bool = None):
    keyboard = [
        [InlineKeyboardButton('1', callback_data=f"price_1_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('2', callback_data=f"price_2_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('3', callback_data=f"price_3_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton('4', callback_data=f"price_4_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('5', callback_data=f"price_5_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('6', callback_data=f"price_6_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton('7', callback_data=f"price_7_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('8', callback_data=f"price_8_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('9', callback_data=f"price_9_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")],
        [InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f"price_{CONFIRM}_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('0', callback_data=f"price_0_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}"), InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f"price_{BACK}_chatid_{chat_id}_bookingid_{booking_id}_cash_{is_payment_by_cash}")]]

    message = (f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É–π —Ü–µ–Ω—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä 370.\n"
                f"–í—ã –≤–≤–µ–ª–∏: {new_price}\n")
    if update.message:
        await update.message.reply_text(
            text=message, 
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_caption(
            caption=message, 
            reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_BOOKING_PURCHASE