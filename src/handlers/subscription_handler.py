import sys
import os

from src.services.navigation_service import safe_edit_message_text
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from src.services.logger_service import LoggerService
from src.services.database_service import DatabaseService
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update)
from telegram.ext import (ContextTypes, CallbackQueryHandler)
from src.config.config import BANK_PHONE_NUMBER, BANK_CARD_NUMBER
from src.handlers import admin_handler, menu_handler
from src.helpers import string_helper, subscription_helper
from src.models.enum.subscription_type import SubscriptionType
from src.models.rental_price import RentalPrice
from src.services.calculation_rate_service import CalculationRateService
from src.constants import (
    END,
    MENU, 
    SET_USER,
    SUBSCRIPTION_PHOTO_UPLOAD,
    SUBSCRIPTION_VALIDATE_USER,
    SUBSCRIPTION,
    CONFIRM)

user_contact: str
subscription_type: SubscriptionType
rate_service = CalculationRateService()
database_service = DatabaseService()
rental_rate: RentalPrice
price: int

def get_handler():
    return [
        CallbackQueryHandler(enter_user_contact, pattern=f"^SUBSCRIPTION-USER_({SET_USER}|{END})$"),
        CallbackQueryHandler(select_subscription_type, pattern=f"^SUBSCRIPTION-TYPE_(\d+|{END})$"),
        CallbackQueryHandler(confirm_pay, pattern=f"^SUBSCRIPTION-CONFIRM-PAY_({END}|{SET_USER})$"),
        CallbackQueryHandler(pay, pattern=f"^SUBSCRIPTION-PAY_({END})$"),
        CallbackQueryHandler(confirm_subscription, pattern=f"^SUBSCRIPTION-CONFIRM_({CONFIRM}|{END})$"),
        CallbackQueryHandler(back_navigation, pattern=f"^SUBSCRIPTION-PAY_{END}$")]

async def back_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await menu_handler.show_menu(update, context)
    LoggerService.info(__name__, "Back to menu", update)
    return MENU

async def enter_user_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = string_helper.get_callback_data(update.callback_query.data)
    if (data == str(END)):
        return await back_navigation(update, context)

    LoggerService.info(__name__, "Enter user contact", update)
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=END)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_edit_message_text(
        callback_query=update.callback_query,
        text="üì≤ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>Telegram</b> –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "üîπ <b>Telegram:</b> @username (–Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å @)\n"
            "üîπ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +375XXXXXXXXX (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å +375)\n"
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        reply_markup=reply_markup)
    return SUBSCRIPTION_VALIDATE_USER

async def generate_subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    LoggerService.info(__name__, "Generate subscription menu", update)
    reset_variables()
    keyboard = [
        [InlineKeyboardButton(
            f"{subscription_helper.get_name(SubscriptionType.VISITS_3)}. –°—É–º–º–∞ {rate_service.get_price(subscription_type = SubscriptionType.VISITS_3)} —Ä—É–±", 
            callback_data=f"SUBSCRIPTION-TYPE_{SubscriptionType.VISITS_3.value}")],
        [InlineKeyboardButton(
            f"{subscription_helper.get_name(SubscriptionType.VISITS_5)}. –°—É–º–º–∞ {rate_service.get_price(subscription_type = SubscriptionType.VISITS_5)} —Ä—É–±", 
            callback_data=f"SUBSCRIPTION-TYPE_{SubscriptionType.VISITS_5.value}")],
        [InlineKeyboardButton(
            f"{subscription_helper.get_name(SubscriptionType.VISITS_8)}. –°—É–º–º–∞ {rate_service.get_price(subscription_type = SubscriptionType.VISITS_8)} —Ä—É–±", 
            callback_data=f"SUBSCRIPTION-TYPE_{SubscriptionType.VISITS_8.value}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"SUBSCRIPTION-TYPE_{END}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await safe_edit_message_text(
        callback_query=update.callback_query,
        text="üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç</b>.\n\n"
            "–ö–∞–∂–¥—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "üè† –ê—Ä–µ–Ω–¥—É –Ω–∞ <b>12 —á–∞—Å–æ–≤</b>\n"
            "üõè <b>2 —Å–ø–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã</b>\n"
            "üîû <b>–°–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É</b>",
        reply_markup=reply_markup)
    return SUBSCRIPTION

async def check_user_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_input = update.message.text
        is_valid = string_helper.is_valid_user_contact(user_input)
        if is_valid:
            global user_contact
            user_contact = user_input
            return await pay(update, context)
        else:
            LoggerService.warning(__name__, "User name is invalid", update)
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n"
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n"
                "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='HTML',)
    return SUBSCRIPTION_VALIDATE_USER

async def select_subscription_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = string_helper.get_callback_data(update.callback_query.data)
    if (data == str(END)):
        return await back_navigation(update, context)

    global subscription_type, rental_rate
    subscription_type = subscription_helper.get_by_str(data)
    LoggerService.info(__name__, f"select subscription type", update, kwargs={'subscription_type': subscription_type})
    rental_rate = rate_service.get_subscription(subscription_type)

    return await confirm_pay(update, context)

async def confirm_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    if update.callback_query:
        data = string_helper.get_callback_data(update.callback_query.data)
        if (data == str(END)):
            return await back_navigation(update, context)

    LoggerService.info(__name__, f"confirm pay", update)
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.", callback_data=f"SUBSCRIPTION-USER_{SET_USER}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"SUBSCRIPTION-USER_{END}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    global price
    price = rate_service.calculate_price(rental_rate, False, True, True)
    categories = rate_service.get_price_categories(rental_rate, False, True, True)

    await safe_edit_message_text(
        callback_query=update.callback_query,
        text=f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:</b> {price} —Ä—É–±.\n\n"
            f"üìå <b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:</b> {categories}.\n\n"
            "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞?</b>",
        reply_markup=reply_markup)
    return SUBSCRIPTION

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        data = string_helper.get_callback_data(update.callback_query.data)
        if (data == str(END)):
            return await back_navigation(update, context)
    
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=END)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    price = rental_rate.price
    LoggerService.info(__name__, f"Pay", update, kwargs={'price': price})

    await update.message.reply_text(
        text=f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:</b> {price} —Ä—É–±.\n\n"
            "üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫):</b>\n"
            f"üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{BANK_PHONE_NUMBER}</b>\n"
            "–∏–ª–∏\n"
            f"üí≥ –ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã: <b>{BANK_CARD_NUMBER}</b>\n\n"
            "‚ö†Ô∏è <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —á–µ–∫–æ–º –æ–± –æ–ø–ª–∞—Ç–µ.</b>\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–ª—å–∫–æ —Ç–∞–∫ –º—ã –º–æ–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É.\n\n"
            "‚úÖ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ–¥.\n"
            "üîë –ö–æ–¥ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª</b> ‚Äì –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "üîí <b>–î–µ—Ä–∂–∏—Ç–µ –∫–æ–¥ –≤ —Ç–∞–π–Ω–µ!</b>",
        parse_mode='HTML',
        reply_markup=reply_markup)
    return SUBSCRIPTION_PHOTO_UPLOAD

async def confirm_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    LoggerService.info(__name__, f"Confirm subscription", update)
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=END)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ The Secret House!</b>\n\n"
            "üì© –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.\n"
            "üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode='HTML',
        reply_markup=reply_markup)

def save_subscription_information():
    code = string_helper.get_generated_code()
    subscription = database_service.add_subscription(user_contact, subscription_type, price, code)
    return subscription

def reset_variables():
    global user_contact, subscription_type, rental_rate, price
    user_contact = None
    subscription_type = None
    rental_rate = None
    price = None

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global photo
    photo = update.message.photo[-1].file_id
    chat_id = update.message.chat.id
    subscription = save_subscription_information()
    LoggerService.info(__name__, f"handle photo", update)
    await admin_handler.accept_subscription_payment(update, context, subscription, chat_id, photo)
    return await confirm_subscription(update, context)