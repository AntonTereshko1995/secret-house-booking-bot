import sys
import os
from src.services.logger_service import LoggerService
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from src.services.database_service import DatabaseService
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup, Update)
from telegram.ext import (ContextTypes, ConversationHandler, MessageHandler, CallbackQueryHandler, filters)
from src.handlers import menu_handler
from src.helpers import string_helper, tariff_helper
from src.constants import (
    END,
    MENU, 
    STOPPING, 
    SET_USER,
    VALIDATE_USER, 
    USER_BOOKING)

user_contact: str
database_service = DatabaseService()

def get_handler() -> ConversationHandler:
    handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(enter_user_contact, pattern=f"^{USER_BOOKING}$")],
        states={
            SET_USER: [CallbackQueryHandler(enter_user_contact)],
            VALIDATE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_user_contact)],
        },
        fallbacks=[CallbackQueryHandler(back_navigation, pattern=f"^{END}$")],
        map_to_parent={
            END: MENU,
            STOPPING: END,
        })
    return handler

async def back_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await menu_handler.show_menu(update, context)
    LoggerService.info(__name__, f"Back to menu", update)
    return END

async def enter_user_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    LoggerService.info(__name__, "Enter user contact", update)
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=END)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text="üì≤ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>Telegram</b> –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "üîπ <b>Telegram:</b> @username (–Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å @)\n"
            "üîπ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +375XXXXXXXXX (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å +375)\n"
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
        parse_mode='HTML',
        reply_markup=reply_markup)
    return VALIDATE_USER

async def check_user_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_input = update.message.text
        is_valid = string_helper.is_valid_user_contact(user_input)
        if is_valid:
            global user_contact
            user_contact = user_input
            return await display_bookings(update, context)
        else:
            LoggerService.warning(__name__, "User name is invalid", update)
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n"
                "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n"
                "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='HTML',)
    return VALIDATE_USER

async def display_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    booking_list = database_service.get_booking_by_user_contact(user_contact)
    message = ""
    if not booking_list or len(booking_list) == 0:
        LoggerService.info(__name__, "Booking not found", update)
        message = ("‚ùå <b>–û—à–∏–±–∫–∞!</b>\n"
            "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            "üì≤ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>Telegram</b> –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "üîπ <b>Telegram:</b> @username (–Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å @)\n"
            "üîπ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +375XXXXXXXXX (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å +375)\n"
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    else:
        for booking in booking_list:
            LoggerService.info(__name__, "Booking is founded.", update)
            message += (
                f"üìå <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>\n"
                f"üìÖ <b>–ó–∞–µ–∑–¥:</b> {booking.start_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìÖ <b>–í—ã–µ–∑–¥:</b> {booking.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üíº <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_helper.get_name(booking.tariff)}\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {booking.price} —Ä—É–±.\n"
                f"‚úî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> {booking.number_of_guests}\n"
                f"‚úî <b>–°–∞—É–Ω–∞:</b> {string_helper.bool_to_str(booking.has_sauna)}\n"
                f"‚úî <b>–§–æ—Ç–æ—Å–µ—Å—Å–∏—è:</b> {string_helper.bool_to_str(booking.has_photoshoot)}\n"
                f"‚úî <b>–ë–µ–ª–∞—è —Å–ø–∞–ª–Ω—è:</b> {string_helper.bool_to_str(booking.has_white_bedroom)}\n"
                f"‚úî <b>–ó–µ–ª–µ–Ω–∞—è —Å–ø–∞–ª—å–Ω—è:</b> {string_helper.bool_to_str(booking.has_green_bedroom)}\n"
                f"‚úî <b>–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞:</b> {string_helper.bool_to_str(booking.has_secret_room)}\n"
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {booking.comment if booking.comment else ''}\n\n\n")
            
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=END)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text=message,
        parse_mode='HTML',
        reply_markup=reply_markup)